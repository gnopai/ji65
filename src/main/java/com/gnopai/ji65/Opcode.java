package com.gnopai.ji65;

import com.gnopai.ji65.address.AddressingModeType;
import com.gnopai.ji65.instruction.InstructionType;
import lombok.Getter;
import lombok.Value;

import java.util.Arrays;
import java.util.Map;
import java.util.Optional;
import java.util.function.Function;

import static com.gnopai.ji65.address.AddressingModeType.*;
import static com.gnopai.ji65.instruction.InstructionType.*;
import static java.util.Optional.ofNullable;
import static java.util.stream.Collectors.toMap;

@Getter
public enum Opcode {
    ADC_IMMEDIATE(ADC, IMMEDIATE, 0x69),
    ADC_ZERO_PAGE(ADC, ZERO_PAGE, 0x65),
    ADC_ZERO_PAGE_X(ADC, ZERO_PAGE_X, 0x75),
    ADC_ABSOLUTE(ADC, ABSOLUTE, 0x6D),
    ADC_ABSOLUTE_X(ADC, ABSOLUTE_X, 0x7D),
    ADC_ABSOLUTE_Y(ADC, ABSOLUTE_Y, 0x79),
    ADC_INDEXED_INDIRECT(ADC, INDEXED_INDIRECT, 0x61),
    ADC_INDIRECT_INDEXED(ADC, INDIRECT_INDEXED, 0x71),
    AND_IMMEDIATE(AND, IMMEDIATE, 0x29),
    AND_ZERO_PAGE(AND, ZERO_PAGE, 0x25),
    AND_ZERO_PAGE_X(AND, ZERO_PAGE_X, 0x35),
    AND_ABSOLUTE(AND, ABSOLUTE, 0x2D),
    AND_ABSOLUTE_X(AND, ABSOLUTE_X, 0x3D),
    AND_ABSOLUTE_Y(AND, ABSOLUTE_Y, 0x39),
    AND_INDEXED_INDIRECT(AND, INDEXED_INDIRECT, 0x21),
    AND_INDIRECT_INDEXED(AND, INDIRECT_INDEXED, 0x31),
    ASL_ACCUMULATOR(ASL, ACCUMULATOR, 0x0A),
    ASL_ZERO_PAGE(ASL, ZERO_PAGE, 0x06),
    ASL_ZERO_PAGE_X(ASL, ZERO_PAGE_X, 0x16),
    ASL_ABSOLUTE(ASL, ABSOLUTE, 0x0E),
    ASL_ABSOLUTE_X(ASL, ABSOLUTE_X, 0x1E),
    BCC_RELATIVE(BCC, RELATIVE, 0x90),
    BCS_RELATIVE(BCS, RELATIVE, 0xB0),
    BEQ_RELATIVE(BEQ, RELATIVE, 0xF0),
    BIT_ZERO_PAGE(BIT, ZERO_PAGE, 0x24),
    BIT_ABSOLUTE(BIT, ABSOLUTE, 0x2C),
    BMI_RELATIVE(BMI, RELATIVE, 0x30),
    BNE_RELATIVE(BNE, RELATIVE, 0xD0),
    BPL_RELATIVE(BPL, RELATIVE, 0x10),
    BRK_IMPLICIT(BRK, IMPLICIT, 0x00),
    BVC_RELATIVE(BVC, RELATIVE, 0x50),
    BVS_RELATIVE(BVS, RELATIVE, 0x70),
    CLC_IMPLICIT(CLC, IMPLICIT, 0x18),
    CLD_IMPLICIT(CLD, IMPLICIT, 0xD8),
    CLI_IMPLICIT(CLI, IMPLICIT, 0x58),
    CLV_IMPLICIT(CLV, IMPLICIT, 0xB8),
    CMP_IMMEDIATE(CMP, IMMEDIATE, 0xC9),
    CMP_ZERO_PAGE(CMP, ZERO_PAGE, 0xC5),
    CMP_ZERO_PAGE_X(CMP, ZERO_PAGE_X, 0xD5),
    CMP_ABSOLUTE(CMP, ABSOLUTE, 0xCD),
    CMP_ABSOLUTE_X(CMP, ABSOLUTE_X, 0xDD),
    CMP_ABSOLUTE_Y(CMP, ABSOLUTE_Y, 0xD9),
    CMP_INDEXED_INDIRECT(CMP, INDEXED_INDIRECT, 0xC1),
    CMP_INDIRECT_INDEXED(CMP, INDIRECT_INDEXED, 0xD1),
    CPX_IMMEDIATE(CPX, IMMEDIATE, 0xE0),
    CPX_ZERO_PAGE(CPX, ZERO_PAGE, 0xE4),
    CPX_ABSOLUTE(CPX, ABSOLUTE, 0xEC),
    CPY_IMMEDIATE(CPY, IMMEDIATE, 0xC0),
    CPY_ZERO_PAGE(CPY, ZERO_PAGE, 0xC4),
    CPY_ABSOLUTE(CPY, ABSOLUTE, 0xCC),
    DEC_ZERO_PAGE(DEC, ZERO_PAGE, 0xC6),
    DEC_ZERO_PAGE_X(DEC, ZERO_PAGE_X, 0xD6),
    DEC_ABSOLUTE(DEC, ABSOLUTE, 0xCE),
    DEC_ABSOLUTE_X(DEC, ABSOLUTE_X, 0xDE),
    DEX_IMPLICIT(DEX, IMPLICIT, 0xCA),
    DEY_IMPLICIT(DEY, IMPLICIT, 0x88),
    EOR_IMMEDIATE(EOR, IMMEDIATE, 0x49),
    EOR_ZERO_PAGE(EOR, ZERO_PAGE, 0x45),
    EOR_ZERO_PAGE_X(EOR, ZERO_PAGE_X, 0x55),
    EOR_ABSOLUTE(EOR, ABSOLUTE, 0x4D),
    EOR_ABSOLUTE_X(EOR, ABSOLUTE_X, 0x5D),
    EOR_ABSOLUTE_Y(EOR, ABSOLUTE_Y, 0x59),
    EOR_INDEXED_INDIRECT(EOR, INDEXED_INDIRECT, 0x41),
    EOR_INDIRECT_INDEXED(EOR, INDIRECT_INDEXED, 0x51),
    INC_ZERO_PAGE(INC, ZERO_PAGE, 0xE6),
    INC_ZERO_PAGE_X(INC, ZERO_PAGE_X, 0xF6),
    INC_ABSOLUTE(INC, ABSOLUTE, 0xEE),
    INC_ABSOLUTE_X(INC, ABSOLUTE_X, 0xFE),
    INX_IMPLICIT(INX, IMPLICIT, 0xE8),
    INY_IMPLICIT(INY, IMPLICIT, 0xC8),
    JMP_ABSOLUTE(JMP, ABSOLUTE, 0x4C),
    JMP_INDIRECT(JMP, INDIRECT, 0x6C),
    JSR_ABSOLUTE(JSR, ABSOLUTE, 0x20),
    LDA_IMMEDIATE(LDA, IMMEDIATE, 0xA9),
    LDA_ZERO_PAGE(LDA, ZERO_PAGE, 0xA5),
    LDA_ZERO_PAGE_X(LDA, ZERO_PAGE_X, 0xB5),
    LDA_ABSOLUTE(LDA, ABSOLUTE, 0xAD),
    LDA_ABSOLUTE_X(LDA, ABSOLUTE_X, 0xBD),
    LDA_ABSOLUTE_Y(LDA, ABSOLUTE_Y, 0xB9),
    LDA_INDEXED_INDIRECT(LDA, INDEXED_INDIRECT, 0xA1),
    LDA_INDIRECT_INDEXED(LDA, INDIRECT_INDEXED, 0xB1),
    LDX_IMMEDIATE(LDX, IMMEDIATE, 0xA2),
    LDX_ZERO_PAGE(LDX, ZERO_PAGE, 0xA6),
    LDX_ZERO_PAGE_Y(LDX, ZERO_PAGE_Y, 0xB6),
    LDX_ABSOLUTE(LDX, ABSOLUTE, 0xAE),
    LDX_ABSOLUTE_Y(LDX, ABSOLUTE_Y, 0xBE),
    LDY_IMMEDIATE(LDY, IMMEDIATE, 0xA0),
    LDY_ZERO_PAGE(LDY, ZERO_PAGE, 0xA4),
    LDY_ZERO_PAGE_X(LDY, ZERO_PAGE_X, 0xB4),
    LDY_ABSOLUTE(LDY, ABSOLUTE, 0xAC),
    LDY_ABSOLUTE_X(LDY, ABSOLUTE_X, 0xBC),
    LSR_ACCUMULATOR(LSR, ACCUMULATOR, 0x4A),
    LSR_ZERO_PAGE(LSR, ZERO_PAGE, 0x46),
    LSR_ZERO_PAGE_X(LSR, ZERO_PAGE_X, 0x56),
    LSR_ABSOLUTE(LSR, ABSOLUTE, 0x4E),
    LSR_ABSOLUTE_X(LSR, ABSOLUTE_X, 0x5E),
    NOP_IMPLICIT(NOP, IMPLICIT, 0xEA),
    ORA_IMMEDIATE(ORA, IMMEDIATE, 0x09),
    ORA_ZERO_PAGE(ORA, ZERO_PAGE, 0x05),
    ORA_ZERO_PAGE_X(ORA, ZERO_PAGE_X, 0x15),
    ORA_ABSOLUTE(ORA, ABSOLUTE, 0x0D),
    ORA_ABSOLUTE_X(ORA, ABSOLUTE_X, 0x1D),
    ORA_ABSOLUTE_Y(ORA, ABSOLUTE_Y, 0x19),
    ORA_INDEXED_INDIRECT(ORA, INDEXED_INDIRECT, 0x01),
    ORA_INDIRECT_INDEXED(ORA, INDIRECT_INDEXED, 0x11),
    PHA_IMPLICIT(PHA, IMPLICIT, 0x48),
    PHP_IMPLICIT(PHP, IMPLICIT, 0x08),
    PLA_IMPLICIT(PLA, IMPLICIT, 0x68),
    PLP_IMPLICIT(PLP, IMPLICIT, 0x28),
    ROL_ACCUMULATOR(ROL, ACCUMULATOR, 0x2A),
    ROL_ZERO_PAGE(ROL, ZERO_PAGE, 0x26),
    ROL_ZERO_PAGE_X(ROL, ZERO_PAGE_X, 0x36),
    ROL_ABSOLUTE(ROL, ABSOLUTE, 0x2E),
    ROL_ABSOLUTE_X(ROL, ABSOLUTE_X, 0x3E),
    ROR_ACCUMULATOR(ROR, ACCUMULATOR, 0x6A),
    ROR_ZERO_PAGE(ROR, ZERO_PAGE, 0x66),
    ROR_ZERO_PAGE_X(ROR, ZERO_PAGE_X, 0x76),
    ROR_ABSOLUTE(ROR, ABSOLUTE, 0x6E),
    ROR_ABSOLUTE_X(ROR, ABSOLUTE_X, 0x7E),
    RTI_IMPLICIT(RTI, IMPLICIT, 0x40),
    RTS_IMPLICIT(RTS, IMPLICIT, 0x60),
    SBC_IMMEDIATE(SBC, IMMEDIATE, 0xE9),
    SBC_ZERO_PAGE(SBC, ZERO_PAGE, 0xE5),
    SBC_ZERO_PAGE_X(SBC, ZERO_PAGE_X, 0xF5),
    SBC_ABSOLUTE(SBC, ABSOLUTE, 0xED),
    SBC_ABSOLUTE_X(SBC, ABSOLUTE_X, 0xFD),
    SBC_ABSOLUTE_Y(SBC, ABSOLUTE_Y, 0xF9),
    SBC_INDEXED_INDIRECT(SBC, INDEXED_INDIRECT, 0xE1),
    SBC_INDIRECT_INDEXED(SBC, INDIRECT_INDEXED, 0xF1),
    SEC_IMPLICIT(SEC, IMPLICIT, 0x38),
    SED_IMPLICIT(SED, IMPLICIT, 0xF8),
    SEI_IMPLICIT(SEI, IMPLICIT, 0x78),
    STA_ZERO_PAGE(STA, ZERO_PAGE, 0x85),
    STA_ZERO_PAGE_X(STA, ZERO_PAGE_X, 0x95),
    STA_ABSOLUTE(STA, ABSOLUTE, 0x8D),
    STA_ABSOLUTE_X(STA, ABSOLUTE_X, 0x9D),
    STA_ABSOLUTE_Y(STA, ABSOLUTE_Y, 0x99),
    STA_INDEXED_INDIRECT(STA, INDEXED_INDIRECT, 0x81),
    STA_INDIRECT_INDEXED(STA, INDIRECT_INDEXED, 0x91),
    STX_ZERO_PAGE(STX, ZERO_PAGE, 0x86),
    STX_ZERO_PAGE_Y(STX, ZERO_PAGE_Y, 0x96),
    STX_ABSOLUTE(STX, ABSOLUTE, 0x8E),
    STY_ZERO_PAGE(STY, ZERO_PAGE, 0x84),
    STY_ZERO_PAGE_X(STY, ZERO_PAGE_X, 0x94),
    STY_ABSOLUTE(STY, ABSOLUTE, 0x8C),
    TAX_IMPLICIT(TAX, IMPLICIT, 0xAA),
    TAY_IMPLICIT(TAY, IMPLICIT, 0xA8),
    TSX_IMPLICIT(TSX, IMPLICIT, 0xBA),
    TXA_IMPLICIT(TXA, IMPLICIT, 0x8A),
    TXS_IMPLICIT(TXS, IMPLICIT, 0x9A),
    TYA_IMPLICIT(TYA, IMPLICIT, 0x98),
    ;

    private final InstructionType instructionType;
    private final byte opcode;
    private final AddressingModeType addressingModeType;

    Opcode(InstructionType instructionType, AddressingModeType addressingModeType, int opcode) {
        this.instructionType = instructionType;
        this.opcode = (byte) opcode;
        this.addressingModeType = addressingModeType;
    }

    public int getByteCount() {
        return addressingModeType.getByteCount();
    }

    @Value
    private static class OpcodeKey {
        InstructionType instructionType;
        AddressingModeType addressingModeType;
    }

    private final static Map<OpcodeKey, Opcode> BY_OPCODE_KEY = Arrays.stream(values())
            .collect(toMap(
                    opcode -> new OpcodeKey(opcode.getInstructionType(), opcode.getAddressingModeType()),
                    Function.identity()));

    public static Optional<Opcode> of(InstructionType instructionType, AddressingModeType addressingModeType) {
        OpcodeKey opcodeKey = new OpcodeKey(instructionType, addressingModeType);
        return ofNullable(BY_OPCODE_KEY.get(opcodeKey));
    }

    private final static Map<Byte, Opcode> BY_BYTE = Arrays.stream(values())
            .collect(toMap(Opcode::getOpcode, Function.identity()));

    public static Optional<Opcode> of(byte b) {
        return ofNullable(BY_BYTE.get(b));
    }
}
